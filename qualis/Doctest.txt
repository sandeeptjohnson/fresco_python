#!/bin/python3

import math
import os
import random
import re
import sys
import inspect



# Complete the following isPalindrome function:
def isPalindrome(x):
    # Write the doctests:
    """
    >>>isPalindrome(121)
    True
    >>>isPalindrome(344)
    False
    >>>isPalindrome(-121)
    Traceback (most recent call last):
        ...
    ValueError: x must be a positive integer
    >>>isPalindrome("hello")
    Traceback (most recent call last):
        ...
    TypeError: x must be an integer
    """
    # Write the functionality:
    if (str(x).isdigit())==False:
        raise TypeError('x must be an integer')
    
    if x<=0 :
        raise ValueError('x must be a positive integer')
    
    if str(x) == str(x)[::-1]:
        return True
    else:
        return False
    

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    x = input()
    
    if x.isdigit():
        x = int(x)

    res = isPalindrome(x)
    
    doc = inspect.getdoc(isPalindrome)
    
    func_count = len(re.findall(r'isPalindrome', doc))
    true_count = len(re.findall(r'True', doc))
    false_count = len(re.findall(r'False', doc))
    pp_count = len(re.findall(r'>>>', doc))
    trace_count = len(re.findall(r'Traceback', doc))

    fptr.write(str(res)+'\n')
    fptr.write(str(func_count)+'\n')
    fptr.write(str(true_count)+'\n')
    fptr.write(str(false_count)+'\n')
    fptr.write(str(pp_count) + '\n')
    fptr.write(str(trace_count) + '\n')

    fptr.close()

########################################
import inspect
import doctest
import re
import math

# Define the class 'Circle' and its methods with proper doctests:
class Circle:
    
    def __init__(self, radius):
        # Define doctests for __init__ method:
        """
        >>c1=Circle(2.5);print(c1.radius);
        2.5
        """
        self.radius = radius
        
    def area(self):
        # Define doctests for area method:
        """
        >>c1=Circle(2.5);print(c1.area());
        19.63
        """
        # Define area functionality:
        
        return round(math.pi*self.radius*self.radius,2)
        
    def circumference(self):
        # Define doctests for circumference method:
        """
        >>c1=Circle(2.5);print(c1.circumference());
        15.71
        """
        # Define circumference functionality:
        return round(2*math.pi*self.radius,2)
        
if __name__ == '__main__':
    doctest.testmod()
    
    c2 = Circle(2.5)
    doc1 = inspect.getdoc(c2.__init__)
    doc2 = inspect.getdoc(c2.area)
    doc3 = inspect.getdoc(c2.circumference)
    
    class_count = len(re.findall(r'Circle', doc1))
    func1_count = len(re.findall(r'c1.radius', doc1))
    func1_val = len(re.findall(r'2.5', doc1))
    
    print(str(class_count), str(func1_count), str(func1_val))
    
    class_count = len(re.findall(r'Circle', doc2))
    func1_count = len(re.findall(r'c1.area', doc2))
    func1_val = len(re.findall(r'19.63', doc2)) 
                      
    print(str(class_count), str(func1_count), str(func1_val))
                      
    class_count = len(re.findall(r'Circle', doc3))
    func1_count = len(re.findall(r'c1.circumference', doc3))
    func1_val = len(re.findall(r'15.71', doc3)) 
                      
    print(str(class_count), str(func1_count), str(func1_val))